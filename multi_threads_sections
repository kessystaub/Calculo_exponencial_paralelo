#include <stdlib.h>
#include <stdio.h>
#include <omp.h>
#include <time.h>
#include <iostream>


using namespace std;


int calcula(int base, int expoente) {
	if (expoente == 0) {
		return 1;
	}
	else {
		return base * calcula(base, expoente - 1);
	}
}


void separa_partes(int inicio, int fim, int respostas[10], int expoentes[10], int bases[10]) {
	for (int i = inicio; i < fim; i++)
	{
		respostas[i] = calcula(bases[i], expoentes[i]);
	}
}

int sorteio(int maximo, int minimo = 0) {
	int i;
	i = rand() % maximo + minimo;
	return i;
}


void cria_vetor(int vetor[], int tamanho, int max, int min=0) {
	if (max == 0) {
		for (int i = 0; i < tamanho; i++)
		{
			vetor[i] = 0;
		}
	}
	else {
		for (int i = 0; i < tamanho; i++)
		{
			vetor[i] = sorteio(max, min);
		}
	}
}



int main() {
	int inicio = 0, fim = 25;
	int bases[25];
	int expoentes[25];
	int respostas[25];

	cria_vetor(bases,25,9,1);
	cria_vetor(expoentes, 25, 5, 1);
	cria_vetor(respostas, 25, 0);

	for (int i = 0; i < 25; i++)
	{
		if (i == 0) {
			printf("Base %i ", bases[i]);
		}
		printf("%i ", bases[i]);
	}

	for (int i = 0; i < 25; i++)
	{
		if (i == 0) {
			printf("\nExpoente %i ", expoentes[i]);
		}
		printf("%i ", expoentes[i]);
	}
	for (int i = 0; i < 25; i++)
	{
		if (i == 0) {
			printf("\nRespostas %i ", respostas[i]);
		}
		printf("%i ", respostas[i]);
	}

	
	double tempo_execucao = 0.0000;
	double inicio_tempo = omp_get_wtime();

	int tamanho_vetor = 25;
	
	#pragma omp parallel num_threads(5)
	{
		int id = omp_get_thread_num();
		#pragma omp sections nowait
		{
			#pragma omp section
			{
				int parte = 5,
					inicio = id * parte,
					fim = inicio + parte;
				printf("\nThread %i --> Fez o parte com inicio em %i e fim em %i \n", id, inicio, fim);
				separa_partes(inicio, fim, respostas, expoentes, bases);
			}
			#pragma omp section 
			{
				int parte = 5,
					inicio = id * parte,
					fim = inicio + parte;
				printf("Thread %i --> Fez o parte com inicio em %i e fim em %i \n", id, inicio, fim);
				separa_partes(inicio, fim, respostas, expoentes, bases);
			}
			#pragma omp section 
			{
				int parte = 5,
					inicio = id * parte,
					fim = inicio + parte;
				printf("Thread %i --> Fez o parte com inicio em %i e fim em %i \n", id, inicio, fim);
				separa_partes(inicio, fim, respostas, expoentes, bases);
			}
			#pragma omp section 
			{
				int parte = 5,
					inicio = id * parte,
					fim = inicio + parte;
				printf("Thread %i --> Fez o parte com inicio em %i e fim em %i \n", id, inicio, fim);
				separa_partes(inicio, fim, respostas, expoentes, bases);
			}
			#pragma omp section 
			{
				int parte = 5,
					inicio = id * parte,
					fim = inicio + parte;
				printf("Thread %i --> Fez o parte com inicio em %i e fim em %i \n", id, inicio, fim);
				separa_partes(inicio, fim, respostas, expoentes, bases);
			}
		}
	}

	double final = omp_get_wtime();
	tempo_execucao = (final - inicio_tempo);


	for (int i = 0; i < 25; i++)
	{
		printf("Resposta da exponencial: %i \n", respostas[i]);
	}

	cout << "tempo execucao: " << tempo_execucao << endl;
	
}
