#include <stdlib.h>
#include <stdio.h>
#include <omp.h>
#include <iostream>


using namespace std;


int calcula(int base, int expoente) {
	if (expoente == 0) {
		return 1;
	}
	else {
		return base * calcula(base, expoente - 1);
	}
}


void separa_blocos(int inicio, int fim, int respostas[10], int expoentes[10], int bases[10]) {
	for (int i = inicio; i < fim; i++)
	{
		respostas[i] = calcula(bases[i], expoentes[i]);
	}
}


int main() {
	int base = 0, expoente = 0, resposta = 0;
	int bases[10] = {2,2,2,2,2,2,2,2,2,2};
	int expoentes[10] = {0,1,2,3,4,5,6,7,8,9};
	int respostas[10] = { 0,0,0,0,0,0,0,0,0,0 };

	double tempo_execucao = 0.0000;
	double inicio = omp_get_wtime();

	

	#pragma omp parallel num_threads(5)
	{
		int id = omp_get_thread_num();

		printf("Thread %i \n", id);
		int inicio=0, fim=0;

		if (id == 0) {
			inicio = 0;
			fim = 2;
		}
		else if(id==1){
			inicio = 2;
			fim = 4;
		}
		else if(id==2) {
			inicio = 4;
			fim = 6;
		}
		else if (id == 3) {
			inicio = 6;
			fim = 8;
		}
		else if (id == 4) {
			inicio = 8;
			fim = 10;
		}

		separa_blocos(inicio, fim, respostas, expoentes, bases);
	}

	double final = omp_get_wtime();
	tempo_execucao = (final - inicio);

	for (int i = 0; i < 10; i++)
	{
		printf("Thread --> resposta da exponencial: %i \n", respostas[i]);
	}

	//cout << "tempo execucao: " << tempo_execucao << endl;
	//printf("resposta: %i\n", resposta);
}
